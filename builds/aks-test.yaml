#
# Build for the Sandbox Testing AKS Cluster
#
name: Test AKS Pipeline
trigger: none
variables:
  environment: 'test'
  aksResourceGroup: 'cnp-test-aks-rg'
  aksClusterName: 'cnp-test-cluster'
  keyvaultName: 'infra-vault-sandbox'
  serviceConnection: 'azurerm-sandbox'
  aksParametersFile: 'arm/parameters/aks/test.json'
  helmVersion: '2.13.1'
  acrName: hmcts

jobs:
- job: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-ci.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: DeployAKS
  dependsOn: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    aksServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalId']]
    aksServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalSecret']]
  steps:
  - template: ../tasks/deploy-aks-arm.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksParametersFile: $(aksParametersFile)
      aksServicePrincipalId: $(aksServicePrincipalId)
      aksServicePrincipalSecret: $(aksServicePrincipalSecret)
  - template: ../steps/install-tiller.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../tasks/dashboard-rbac.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)

- job: InstallTraefik
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../tasks/traefik.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      environment: $(environment)

- job: InstallKured
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Get secrets from Keyvault'
    inputs:
      azureSubscription: $(serviceConnection)
      keyVaultName: $(keyvaultName)
      secretsFilter: 'kured-slack-webhook-url'
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - task: AzureCLI@1
    displayName: 'Configure Helm for ACR'
    inputs:
      azureSubscription: azurerm-nonprod
      scriptLocation: 'inlineScript'
      inlineScript: |
        az configure --defaults acr=$(acrName)
        az acr helm repo add --name $(acrName)
  - task: AzureCLI@1
    displayName: 'Install Kured'
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)
        helm upgrade kured $(acrName)/kured --install --set slackWebhookUrl=$(kured-slack-webhook-url),slackUsername=$(aksClusterName)

- job: InstallServiceCatalog
  dependsOn:
  - Keyvault
  - DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    svcatServicePrincipalSubscriptionId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalSubscriptionId']]
    svcatServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalId']]
    svcatServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalSecret']]
    svcatServicePrincipalTenantId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalTenantId']]
  steps:
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../steps/service-catalog.yml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)