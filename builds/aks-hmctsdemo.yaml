#
# Build for the Sandbox CI AKS Cluster
#
name: HMCTSDEMO AKS Pipeline
trigger: none
variables:
  environment: 'hmctsdemo'
  aksResourceGroup: 'k8-hmctsdemo'
  aksClusterName: 'k8-cluster-hmctsdemo'
  keyvaultName: 'infra-vault-hmctsdemo'
  serviceConnection: 'azurerm-hmctsdemo'
  aksParametersFile: 'hmctsdemo.json'

jobs:
- job: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-ci.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: DeployAKS
  dependsOn: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    aksServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalId']]
    aksServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalSecret']]
  steps:
  - template: ../tasks/helm-installer.yaml
  - template: ../steps/deploy-aks.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      aksParametersFile: $(aksParametersFile)

- job: InstallKured
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/configure-helm.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
  - template: ../tasks/kured.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
